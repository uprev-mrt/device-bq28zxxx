/**
  * @file bq28z_regs.h
  * @author generated by mrt-device utility 
  * @link [https://github.com/uprev-mrt/mrtutils/wiki/mrt-device]
  * @brief values and constants for the BQ28Z device registers
  * 
  */

#define BQ28Z_I2C_ADDRESS 0xAA
#define BQ28Z_REG_ADDR_SIZE 1


/*******************************************************************************
  Register Addresses                                                                              
*******************************************************************************/

#define BQ28Z_REG_DUMMY_ADDR                                       0x00 /* dummy register */
#define BQ28Z_REG_MANUFACTURERACCESS_CONTROLSTATUS_ADDR            0x00 /* Control Register */
#define BQ28Z_REG_ATRATE_ADDR                                      0x02 /* Read/Write. The value is a signed integer with the negative value indicating a discharge current value. The default value is 0 and forces AtRateTimeToEmpty() to return 65535. */
#define BQ28Z_REG_ATRATETIMETOEMPTY_ADDR                           0x04 /* This read-only function returns an unsigned integer value to predict remaining operating time based on battery discharge at the AtRate() value in minutes with a range of 0 to 65534. A value of 65535 indicates AtRate() = 0. The gas gauge updates the AtRateTimeToEmpty() within 1 s after the system sets the AtRate() value. The gas gauge updates these parameters every 1 s. The commands are used in NORMAL mode. */
#define BQ28Z_REG_TEMPERATURE_ADDR                                 0x06 /* This read-only function returns an unsigned integer value of temperature in units ( 0.1 k) measured by the gas gauge and is used for the gauging algorithm. It reports either InternalTemperature() or external thermistor temperature depending on the setting of the TEMPS bit in Pack configuration. */
#define BQ28Z_REG_VOLTAGE_ADDR                                     0x08 /* This read-only function returns an unsigned integer value of the measured cell pack in mV with a range of 0 12000 mV. */
#define BQ28Z_REG_BATTERYSTATUS_ADDR                               0x0A /* See the Flags register. */
#define BQ28Z_REG_CURRENT_ADDR                                     0x0C /* This read-only function returns a signed integer value that is the instantaneous current flow through the sense resistor. The value is updated every 1 s. Units are mA. */
#define BQ28Z_REG_MAXERROR_ADDR                                    0x0E /* This read-word function returns the expected margin of error */
#define BQ28Z_REG_REMAININGCAPACITY_ADDR                           0x10 /* This read-only command returns the predicted remaining capacity based on rate (per configured Load Select) temperature present depth-of-discharge and stored impedance. Values are reported in mAh. */
#define BQ28Z_REG_FULLCHARGECAPACITY_ADDR                          0x12 /* This read-only command returns the predicted capacity of the battery at full charge based on rate (per configured Load Select) temperature present depth-of-discharge and stored impedance. Values are reported in mAh. */
#define BQ28Z_REG_AVERAGECURRENT_ADDR                              0x14 /* This read-only function returns a signed integer value that is the average current flow through the sense resistor. The value is updated every 1 s. Units are mA. */
#define BQ28Z_REG_AVERAGETIMETOEMPTY_ADDR                          0x16 /* Uses average current value with a time constant of 15 s for this method. A value of 65535 means the battery is not being discharged. */
#define BQ28Z_REG_AVERAGETIMETOFULL_ADDR                           0x18 /* This read-only function returns a unsigned integer value predicting time to reach full charge for the battery in units of minutes based on AverageCurrent(). The computation accounts for the taper current time extension from linear TTF computation based on a fixed AverageCurrent() rate of charge accumulation. A value of 65535 indicates the battery is not being charged. */
#define BQ28Z_REG_STANDBYCURRENT_ADDR                              0x1A /* This read-only function returns a signed integer value of measured standby current through the sense resistor. The StandbyCurrent() is an adaptive measurement. Initially it will report the standby current programmed in initial standby and after several seconds in standby mode will report the measured standby. The register value is updated every 1 s when measured current is above the deadband and is less than or equal to 2 Ã— initial standby. The first and last values that meet these criteria are not averaged in since they may not be stable values. To approximate to a 1-min time constant each new value of StandbyCurrent() is computed by taking approximate 93% weight of the last standby current and approximate 7% of the current measured average current. */
#define BQ28Z_REG_STANDBYTIMETOEMPTY_ADDR                          0x1C /* This read-only function returns a unsigned integer value predicting remaining battery life at standby rate of discharge in units of minutes. The computation uses Nominal Available Capacity (NAC) for the calculation. A value of 65535 indicates the battery is not being discharged. */
#define BQ28Z_REG_MAXLOADCURRENT_ADDR                              0x1E /* This read-only function returns a signed integer value in units of mA of maximum load conditions. The MaxLoadCurrent() is an adaptive measurement which is initially reported as the maximum load current programmed in initial Max Load Current register. If the measured current is ever greater than the initial Max Load Current then the MaxLoadCurrent() updates to the new current. MaxLoadCurrent() is reduced to the average of the previous value and initial Max Load Current whenever the battery is charged to full after a previous discharge to an SOC of less than 50%. This will prevent the reported value from maintaining an unusually high value. */
#define BQ28Z_REG_MAXLOADTIMETOEMPTY_ADDR                          0x20 /* This read-only function returns a unsigned integer value predicting remaining battery life at the maximum discharge load current rate in units of minutes. A value of 65535 indicates that the battery is not being discharged. */
#define BQ28Z_REG_AVERAGEPOWER_ADDR                                0x22 /* This read-only function returns a signed integer value of average power during battery charging and discharging. It is negative during discharge and positive during charge. A value of 0 indicates that the battery is not being discharged. The value is reported in units of mW. */
#define BQ28Z_REG_BTPDISCHARGESET_ADDR                             0x24 /* This command sets the OperationStatusA BTP_INT and the BTP_INT pin will be asserted when the RemCap drops below the set threshold in DF register. */
#define BQ28Z_REG_BTPCHARGESET_ADDR                                0x26 /* This command clears the OperationStatusA BTP_INT and the BTP_INT pin will be deasserted. */
#define BQ28Z_REG_INTERNALTEMPERATURE_ADDR                         0x28 /* This read-only function returns an unsigned integer value of the measured internal temperature of the device in 0.1-k units measured by the gas gauge. */
#define BQ28Z_REG_CYCLECOUNT_ADDR                                  0x2A /* This read-only function returns an unsigned integer value of the number of cycles the battery has experienced a discharge (range 0 to 65535). One cycle occurs when accumulated discharge greater than or equal to CC threshold. */
#define BQ28Z_REG_RELATIVESTATEOFCHARGE_ADDR                       0x2C /* This read-only function returns an unsigned integer value of the predicted remaining battery capacity expressed as percentage of FullChargeCapacity() with a range of 0% to 100%. */
#define BQ28Z_REG_STATEOFHEALTH_ADDR                               0x2E /* This read-only function returns an unsigned integer value expressed as a percentage of the ratio of predicted FCC (25C SoH Load Rate) over the DesignCapacity(). The range is 0x00 to 0x64 for 0% to 100% respectively. */
#define BQ28Z_REG_CHARGEVOLTAGE_ADDR                               0x30 /* Returns the desired charging voltage in mV to the charger */
#define BQ28Z_REG_CHARGECURRENT_ADDR                               0x32 /* Returns the desired charging current in mA to the charger */
#define BQ28Z_REG_DESIGNCAPACITY_ADDR                              0x3C /* In SEALED and UNSEALED access This command returns the value stored in Design Capacity and is expressed in mAh. This is intended to be a theoretical or nominal capacity of a new pack but should have no bearing on the operation of the gas gauge functionality. */
#define BQ28Z_REG_ALTMANUFACTURERACCESS_ADDR                       0x3E /* MAC Data block command */
#define BQ28Z_REG_MACDATA_ADDR                                     0x40 /* MAC Data block */
#define BQ28Z_REG_SAFETYALERT_ADDR                                 0x50 /* This command returns the SafetyAlert flags on AltManufacturerAccess or MACData. */
#define BQ28Z_REG_MACDATASUM_ADDR                                  0x60 /* MAC Data block checksum */
#define BQ28Z_REG_MACDATALEN_ADDR                                  0x61 /* MAC Data block length */


/*******************************************************************************
  Fields                                                                              
*******************************************************************************/

/* DUMMY Register Fields */
    /* DUMMY -> Flags */
    #define BQ28Z_DUMMY_BIT0                                       0x0001 /* creates a flag at bit 0 of the DUMMY register */
    #define BQ28Z_DUMMY_BIT1                                       0x0002 /* creates a flag at bit 1 of the DUMMY register */
    /* DUMMY -> REMAINING */
    #define BQ28Z_DUMMY_REMAINING_FIELD_MASK                       0xFFFC /* creates a 14 bit field using the remaing bits */
    #define BQ28Z_DUMMY_REMAINING_FIELD_OFFSET                     0x0002
      #define BQ28Z_DUMMY_REMAINING_MIN                            0x0000 /* creates a macro for the minimum 14 bit value */
      #define BQ28Z_DUMMY_REMAINING_MAX                            0x3FFF /* creates a macro for the maximum 14 bit value */

/* ManufacturerAccess_ControlStatus Register Fields */
    /* ManufacturerAccess_ControlStatus -> Flags */
    #define BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_AUTHCALM        0x1000 /* Automatic Calibration Mode */
    #define BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_CHECKSUMVALID   0x0200 /* Checksum Valid */
    #define BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_BTP_INT         0x0080 /* Battery Trip Point Interrupt. Setting and clearing this bit depends on various conditions */
    #define BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_LDMD            0x0008 /* LOAD Mode */
    #define BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_R_DIS           0x0004 /* Resistance Updates */
    #define BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_VOK             0x0002 /* Voltage OK for QMax Update */
    #define BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_QMAX            0x0001 /* QMax Updates. This bit toggles after every QMax update. */
    /* ManufacturerAccess_ControlStatus -> SECURITY_Mode */
    #define BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_SECURITY_MODE_FIELD_MASK 0x6000 /* Security Mode */
    #define BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_SECURITY_MODE_FIELD_OFFSET 0x000D
      #define BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_SECURITY_MODE_RESERVED 0x0000 /* Reserved */
      #define BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_SECURITY_MODE_FULL_ACCESS 0x0001 /* Full Access */
      #define BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_SECURITY_MODE_UNSEALED 0x0002 /* Unsealed */
      #define BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_SECURITY_MODE_SEALED 0x0003 /* Sealed */

/* AtRate Register Fields */
    /* AtRate -> AtRate */
    #define BQ28Z_ATRATE_ATRATE_FIELD_MASK                         0xFFFF /* Read/Write. The value is a signed integer with the negative value indicating a discharge current value. The default value is 0 and forces AtRateTimeToEmpty() to return 65535. */
    #define BQ28Z_ATRATE_ATRATE_FIELD_OFFSET                       0x0000

/* AtRateTimeToEmpty Register Fields */
    /* AtRateTimeToEmpty -> AtRateTimeToEmpty */
    #define BQ28Z_ATRATETIMETOEMPTY_ATRATETIMETOEMPTY_FIELD_MASK   0xFFFF /* This read-only function returns an unsigned integer value to predict remaining operating time based on battery discharge at the AtRate() value in minutes with a range of 0 to 65534. A value of 65535 indicates AtRate() = 0. The gas gauge updates the AtRateTimeToEmpty() within 1 s after the system sets the AtRate() value. The gas gauge updates these parameters every 1 s. The commands are used in NORMAL mode. */
    #define BQ28Z_ATRATETIMETOEMPTY_ATRATETIMETOEMPTY_FIELD_OFFSET 0x0000

/* Temperature Register Fields */
    /* Temperature -> Temperature */
    #define BQ28Z_TEMPERATURE_TEMPERATURE_FIELD_MASK               0xFFFF /* This read-only function returns an unsigned integer value of temperature in units ( 0.1 k) measured by the gas gauge and is used for the gauging algorithm. It reports either InternalTemperature() or external thermistor temperature depending on the setting of the TEMPS bit in Pack configuration. */
    #define BQ28Z_TEMPERATURE_TEMPERATURE_FIELD_OFFSET             0x0000

/* Voltage Register Fields */
    /* Voltage -> Voltage */
    #define BQ28Z_VOLTAGE_VOLTAGE_FIELD_MASK                       0xFFFF /* This read-only function returns an unsigned integer value of the measured cell pack in mV with a range of 0 12000 mV. */
    #define BQ28Z_VOLTAGE_VOLTAGE_FIELD_OFFSET                     0x0000

/* BatteryStatus Register Fields */
    /* BatteryStatus -> Flags */
    #define BQ28Z_BATTERYSTATUS_FD                                 0x0010 /* Fully Discharged */
    #define BQ28Z_BATTERYSTATUS_FC                                 0x0020 /* Fully Charged */
    #define BQ28Z_BATTERYSTATUS_DSG                                0x0040 /* Discharging */
    #define BQ28Z_BATTERYSTATUS_INIT                               0x0080 /* Initialization */
    #define BQ28Z_BATTERYSTATUS_RTA                                0x0100 /* Remaining Time Alarm */
    #define BQ28Z_BATTERYSTATUS_RCA                                0x0200 /* Remaining Capacity Alarm */
    #define BQ28Z_BATTERYSTATUS_TDA                                0x0800 /* Terminate Discharge Alarm */
    #define BQ28Z_BATTERYSTATUS_OTA                                0x1000 /* Overtemperature Alarm */
    #define BQ28Z_BATTERYSTATUS_TCA                                0x4000 /* Terminate Charge Alarm */
    #define BQ28Z_BATTERYSTATUS_OCA                                0x8000 /* Overcharged Alarm */
    /* BatteryStatus -> Error_Code */
    #define BQ28Z_BATTERYSTATUS_ERROR_CODE_FIELD_MASK              0x000F /* Error Code */
    #define BQ28Z_BATTERYSTATUS_ERROR_CODE_FIELD_OFFSET            0x0000
      #define BQ28Z_BATTERYSTATUS_ERROR_CODE_OK                    0x0000 /* OK */
      #define BQ28Z_BATTERYSTATUS_ERROR_CODE_BUSY                  0x0001 /* Busy */
      #define BQ28Z_BATTERYSTATUS_ERROR_CODE_RESERVED_COMMAND      0x0002 /* Reserved_Command */
      #define BQ28Z_BATTERYSTATUS_ERROR_CODE_UNSUPPORTED_COMMAND   0x0003 /* Unsupported_Command */
      #define BQ28Z_BATTERYSTATUS_ERROR_CODE_ACCESSDENIED          0x0004 /* AccessDenied */
      #define BQ28Z_BATTERYSTATUS_ERROR_CODE_OVERFLOW_UNDERFLOW    0x0005 /* Overflow_Underflow */
      #define BQ28Z_BATTERYSTATUS_ERROR_CODE_BADSIZE               0x0006 /* BadSize */
      #define BQ28Z_BATTERYSTATUS_ERROR_CODE_UNKNOWNERROR          0x0007 /* UnknownError */

/* Current Register Fields */
    /* Current -> Current */
    #define BQ28Z_CURRENT_CURRENT_FIELD_MASK                       0xFFFF /* This read-only function returns a signed integer value that is the instantaneous current flow through the sense resistor. The value is updated every 1 s. Units are mA. */
    #define BQ28Z_CURRENT_CURRENT_FIELD_OFFSET                     0x0000

/* MaxError Register Fields */
    /* MaxError -> MaxError */
    #define BQ28Z_MAXERROR_MAXERROR_FIELD_MASK                     0xFF /* This read-word function returns the expected margin of error */
    #define BQ28Z_MAXERROR_MAXERROR_FIELD_OFFSET                   0x00

/* RemainingCapacity Register Fields */
    /* RemainingCapacity -> RemainingCapacity */
    #define BQ28Z_REMAININGCAPACITY_REMAININGCAPACITY_FIELD_MASK   0xFFFF /* This read-only command returns the predicted remaining capacity based on rate (per configured Load Select) temperature present depth-of-discharge and stored impedance. Values are reported in mAh. */
    #define BQ28Z_REMAININGCAPACITY_REMAININGCAPACITY_FIELD_OFFSET 0x0000

/* FullChargeCapacity Register Fields */
    /* FullChargeCapacity -> FullChargeCapacity */
    #define BQ28Z_FULLCHARGECAPACITY_FULLCHARGECAPACITY_FIELD_MASK 0xFFFF /* This read-only command returns the predicted capacity of the battery at full charge based on rate (per configured Load Select) temperature present depth-of-discharge and stored impedance. Values are reported in mAh. */
    #define BQ28Z_FULLCHARGECAPACITY_FULLCHARGECAPACITY_FIELD_OFFSET 0x0000

/* AverageCurrent Register Fields */
    /* AverageCurrent -> AverageCurrent */
    #define BQ28Z_AVERAGECURRENT_AVERAGECURRENT_FIELD_MASK         0xFFFF /* This read-only function returns a signed integer value that is the average current flow through the sense resistor. The value is updated every 1 s. Units are mA. */
    #define BQ28Z_AVERAGECURRENT_AVERAGECURRENT_FIELD_OFFSET       0x0000

/* AverageTimeToEmpty Register Fields */
    /* AverageTimeToEmpty -> AverageTimeToEmpty */
    #define BQ28Z_AVERAGETIMETOEMPTY_AVERAGETIMETOEMPTY_FIELD_MASK 0xFFFF /* Uses average current value with a time constant of 15 s for this method. A value of 65535 means the battery is not being discharged. */
    #define BQ28Z_AVERAGETIMETOEMPTY_AVERAGETIMETOEMPTY_FIELD_OFFSET 0x0000

/* AverageTimeToFull Register Fields */
    /* AverageTimeToFull -> AverageTimeToFull */
    #define BQ28Z_AVERAGETIMETOFULL_AVERAGETIMETOFULL_FIELD_MASK   0xFFFF /* This read-only function returns a unsigned integer value predicting time to reach full charge for the battery in units of minutes based on AverageCurrent(). The computation accounts for the taper current time extension from linear TTF computation based on a fixed AverageCurrent() rate of charge accumulation. A value of 65535 indicates the battery is not being charged. */
    #define BQ28Z_AVERAGETIMETOFULL_AVERAGETIMETOFULL_FIELD_OFFSET 0x0000

/* StandbyCurrent Register Fields */
    /* StandbyCurrent -> StandbyCurrent */
    #define BQ28Z_STANDBYCURRENT_STANDBYCURRENT_FIELD_MASK         0xFFFF /* This read-only function returns a signed integer value of measured standby current through the sense resistor. The StandbyCurrent() is an adaptive measurement. Initially it will report the standby current programmed in initial standby and after several seconds in standby mode will report the measured standby. The register value is updated every 1 s when measured current is above the deadband and is less than or equal to 2 Ã— initial standby. The first and last values that meet these criteria are not averaged in since they may not be stable values. To approximate to a 1-min time constant each new value of StandbyCurrent() is computed by taking approximate 93% weight of the last standby current and approximate 7% of the current measured average current. */
    #define BQ28Z_STANDBYCURRENT_STANDBYCURRENT_FIELD_OFFSET       0x0000

/* StandbyTimeToEmpty Register Fields */
    /* StandbyTimeToEmpty -> StandbyTimeToEmpty */
    #define BQ28Z_STANDBYTIMETOEMPTY_STANDBYTIMETOEMPTY_FIELD_MASK 0xFFFF /* This read-only function returns a unsigned integer value predicting remaining battery life at standby rate of discharge in units of minutes. The computation uses Nominal Available Capacity (NAC) for the calculation. A value of 65535 indicates the battery is not being discharged. */
    #define BQ28Z_STANDBYTIMETOEMPTY_STANDBYTIMETOEMPTY_FIELD_OFFSET 0x0000

/* MaxLoadCurrent Register Fields */
    /* MaxLoadCurrent -> MaxLoadCurrent */
    #define BQ28Z_MAXLOADCURRENT_MAXLOADCURRENT_FIELD_MASK         0xFFFF /* This read-only function returns a signed integer value in units of mA of maximum load conditions. The MaxLoadCurrent() is an adaptive measurement which is initially reported as the maximum load current programmed in initial Max Load Current register. If the measured current is ever greater than the initial Max Load Current then the MaxLoadCurrent() updates to the new current. MaxLoadCurrent() is reduced to the average of the previous value and initial Max Load Current whenever the battery is charged to full after a previous discharge to an SOC of less than 50%. This will prevent the reported value from maintaining an unusually high value. */
    #define BQ28Z_MAXLOADCURRENT_MAXLOADCURRENT_FIELD_OFFSET       0x0000

/* MaxLoadTimeToEmpty Register Fields */
    /* MaxLoadTimeToEmpty -> MaxLoadTimeToEmpty */
    #define BQ28Z_MAXLOADTIMETOEMPTY_MAXLOADTIMETOEMPTY_FIELD_MASK 0xFFFF /* This read-only function returns a unsigned integer value predicting remaining battery life at the maximum discharge load current rate in units of minutes. A value of 65535 indicates that the battery is not being discharged. */
    #define BQ28Z_MAXLOADTIMETOEMPTY_MAXLOADTIMETOEMPTY_FIELD_OFFSET 0x0000

/* AveragePower Register Fields */
    /* AveragePower -> AveragePower */
    #define BQ28Z_AVERAGEPOWER_AVERAGEPOWER_FIELD_MASK             0xFFFF /* This read-only function returns a signed integer value of average power during battery charging and discharging. It is negative during discharge and positive during charge. A value of 0 indicates that the battery is not being discharged. The value is reported in units of mW. */
    #define BQ28Z_AVERAGEPOWER_AVERAGEPOWER_FIELD_OFFSET           0x0000

/* BTPDischargeSet Register Fields */
    /* BTPDischargeSet -> BTPDischargeSet */
    #define BQ28Z_BTPDISCHARGESET_BTPDISCHARGESET_FIELD_MASK       0xFFFF /* This command sets the OperationStatusA BTP_INT and the BTP_INT pin will be asserted when the RemCap drops below the set threshold in DF register. */
    #define BQ28Z_BTPDISCHARGESET_BTPDISCHARGESET_FIELD_OFFSET     0x0000

/* BTPChargeSet Register Fields */
    /* BTPChargeSet -> BTPChargeSet */
    #define BQ28Z_BTPCHARGESET_BTPCHARGESET_FIELD_MASK             0xFFFF /* This command clears the OperationStatusA BTP_INT and the BTP_INT pin will be deasserted. */
    #define BQ28Z_BTPCHARGESET_BTPCHARGESET_FIELD_OFFSET           0x0000

/* InternalTemperature Register Fields */
    /* InternalTemperature -> InternalTemperature */
    #define BQ28Z_INTERNALTEMPERATURE_INTERNALTEMPERATURE_FIELD_MASK 0xFFFF /* This read-only function returns an unsigned integer value of the measured internal temperature of the device in 0.1-k units measured by the gas gauge. */
    #define BQ28Z_INTERNALTEMPERATURE_INTERNALTEMPERATURE_FIELD_OFFSET 0x0000

/* CycleCount Register Fields */
    /* CycleCount -> CycleCount */
    #define BQ28Z_CYCLECOUNT_CYCLECOUNT_FIELD_MASK                 0xFFFF /* This read-only function returns an unsigned integer value of the number of cycles the battery has experienced a discharge (range 0 to 65535). One cycle occurs when accumulated discharge greater than or equal to CC threshold. */
    #define BQ28Z_CYCLECOUNT_CYCLECOUNT_FIELD_OFFSET               0x0000

/* RelativeStateOfCharge Register Fields */
    /* RelativeStateOfCharge -> RelativeStateOfCharge */
    #define BQ28Z_RELATIVESTATEOFCHARGE_RELATIVESTATEOFCHARGE_FIELD_MASK 0xFF /* This read-only function returns an unsigned integer value of the predicted remaining battery capacity expressed as percentage of FullChargeCapacity() with a range of 0% to 100%. */
    #define BQ28Z_RELATIVESTATEOFCHARGE_RELATIVESTATEOFCHARGE_FIELD_OFFSET 0x00

/* StateOfHealth Register Fields */
    /* StateOfHealth -> StateOfHealth */
    #define BQ28Z_STATEOFHEALTH_STATEOFHEALTH_FIELD_MASK           0xFF /* This read-only function returns an unsigned integer value expressed as a percentage of the ratio of predicted FCC (25C SoH Load Rate) over the DesignCapacity(). The range is 0x00 to 0x64 for 0% to 100% respectively. */
    #define BQ28Z_STATEOFHEALTH_STATEOFHEALTH_FIELD_OFFSET         0x00

/* ChargeVoltage Register Fields */
    /* ChargeVoltage -> ChargeVoltage */
    #define BQ28Z_CHARGEVOLTAGE_CHARGEVOLTAGE_FIELD_MASK           0xFFFF /* Returns the desired charging voltage in mV to the charger */
    #define BQ28Z_CHARGEVOLTAGE_CHARGEVOLTAGE_FIELD_OFFSET         0x0000

/* ChargeCurrent Register Fields */
    /* ChargeCurrent -> ChargeCurrent */
    #define BQ28Z_CHARGECURRENT_CHARGECURRENT_FIELD_MASK           0xFFFF /* Returns the desired charging current in mA to the charger */
    #define BQ28Z_CHARGECURRENT_CHARGECURRENT_FIELD_OFFSET         0x0000

/* DesignCapacity Register Fields */
    /* DesignCapacity -> DesignCapacity */
    #define BQ28Z_DESIGNCAPACITY_DESIGNCAPACITY_FIELD_MASK         0xFFFF /* In SEALED and UNSEALED access This command returns the value stored in Design Capacity and is expressed in mAh. This is intended to be a theoretical or nominal capacity of a new pack but should have no bearing on the operation of the gas gauge functionality. */
    #define BQ28Z_DESIGNCAPACITY_DESIGNCAPACITY_FIELD_OFFSET       0x0000

/* AltManufacturerAccess Register Fields */
    /* AltManufacturerAccess -> AltManufacturerAccess */
    #define BQ28Z_ALTMANUFACTURERACCESS_ALTMANUFACTURERACCESS_FIELD_MASK 0xFFFF /* MAC Data block command */
    #define BQ28Z_ALTMANUFACTURERACCESS_ALTMANUFACTURERACCESS_FIELD_OFFSET 0x0000

/* MACData Register Fields */
    /* MACData -> MACData */
    #define BQ28Z_MACDATA_MACDATA_FIELD_MASK                       0xFFFF /* MAC Data block */
    #define BQ28Z_MACDATA_MACDATA_FIELD_OFFSET                     0x0000

/* SafetyAlert Register Fields */
    /* SafetyAlert -> Flags */
    #define BQ28Z_SAFETYALERT_UTD                                  0x08000000 /* Undertemperature During Discharge */
    #define BQ28Z_SAFETYALERT_UTC                                  0x04000000 /* Undertemperature During Charge */
    #define BQ28Z_SAFETYALERT_CTOS                                 0x00200000 /* Charge Timeout Suspend */
    #define BQ28Z_SAFETYALERT_PTOS                                 0x00080000 /* Precharge Timeout Suspend */
    #define BQ28Z_SAFETYALERT_OTD                                  0x00002000 /* Overtemperature During Discharge */
    #define BQ28Z_SAFETYALERT_OTC                                  0x00001000 /* Overtemperature During Charge */
    #define BQ28Z_SAFETYALERT_ASCD                                 0x00000400 /* Short-Circuit During Discharge */
    #define BQ28Z_SAFETYALERT_ASCC                                 0x00000100 /* Short-Circuit During Charge */
    #define BQ28Z_SAFETYALERT_AOLD                                 0x00000040 /* Overload During Discharge */
    #define BQ28Z_SAFETYALERT_OCD                                  0x00000010 /* Overcurrent During Discharge */
    #define BQ28Z_SAFETYALERT_OCC                                  0x00000004 /* Overcurrent During Charge */
    #define BQ28Z_SAFETYALERT_COV                                  0x00000002 /* Cell Overvoltage */
    #define BQ28Z_SAFETYALERT_CUV                                  0x00000001 /* Cell Undervoltage */

/* MACDataSum Register Fields */
    /* MACDataSum -> MACDataSum */
    #define BQ28Z_MACDATASUM_MACDATASUM_FIELD_MASK                 0xFF /* MAC Data block checksum */
    #define BQ28Z_MACDATASUM_MACDATASUM_FIELD_OFFSET               0x00

/* MACDataLen Register Fields */
    /* MACDataLen -> MACDataLen */
    #define BQ28Z_MACDATALEN_MACDATALEN_FIELD_MASK                 0xFF /* MAC Data block length */
    #define BQ28Z_MACDATALEN_MACDATALEN_FIELD_OFFSET               0x00


/*******************************************************************************
  Default Values                                                                              
*******************************************************************************/

#define BQ28Z_DUMMY_DEFAULT                                        0xDEAD
#define BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_DEFAULT             0x0000
#define BQ28Z_ATRATE_DEFAULT                                       0x0000
#define BQ28Z_ATRATETIMETOEMPTY_DEFAULT                            0x0000
#define BQ28Z_TEMPERATURE_DEFAULT                                  0x0000
#define BQ28Z_VOLTAGE_DEFAULT                                      0x0000
#define BQ28Z_BATTERYSTATUS_DEFAULT                                0x0000
#define BQ28Z_CURRENT_DEFAULT                                      0x0000
#define BQ28Z_MAXERROR_DEFAULT                                     0x00
#define BQ28Z_REMAININGCAPACITY_DEFAULT                            0x0000
#define BQ28Z_FULLCHARGECAPACITY_DEFAULT                           0x0000
#define BQ28Z_AVERAGECURRENT_DEFAULT                               0x0000
#define BQ28Z_AVERAGETIMETOEMPTY_DEFAULT                           0x0000
#define BQ28Z_AVERAGETIMETOFULL_DEFAULT                            0x0000
#define BQ28Z_STANDBYCURRENT_DEFAULT                               0x0000
#define BQ28Z_STANDBYTIMETOEMPTY_DEFAULT                           0x0000
#define BQ28Z_MAXLOADCURRENT_DEFAULT                               0x0000
#define BQ28Z_MAXLOADTIMETOEMPTY_DEFAULT                           0x0000
#define BQ28Z_AVERAGEPOWER_DEFAULT                                 0x0000
#define BQ28Z_BTPDISCHARGESET_DEFAULT                              0x0000
#define BQ28Z_BTPCHARGESET_DEFAULT                                 0x0000
#define BQ28Z_INTERNALTEMPERATURE_DEFAULT                          0x0000
#define BQ28Z_CYCLECOUNT_DEFAULT                                   0x0000
#define BQ28Z_RELATIVESTATEOFCHARGE_DEFAULT                        0x00
#define BQ28Z_STATEOFHEALTH_DEFAULT                                0x00
#define BQ28Z_CHARGEVOLTAGE_DEFAULT                                0x0000
#define BQ28Z_CHARGECURRENT_DEFAULT                                0x0000
#define BQ28Z_DESIGNCAPACITY_DEFAULT                               0x0000
#define BQ28Z_ALTMANUFACTURERACCESS_DEFAULT                        0x0000
#define BQ28Z_MACDATA_DEFAULT                                      0x0000
#define BQ28Z_SAFETYALERT_DEFAULT                                  0x00000000
#define BQ28Z_MACDATASUM_DEFAULT                                   0x00
#define BQ28Z_MACDATALEN_DEFAULT                                   0x00

/*******************************************************************************
  Flag Set/Clear/Check                                                                             
*******************************************************************************/

/**
  *@brief sets flags on device
  *@param dev ptr to BQ28Z device
  *@param reg ptr to register definition
  *@param mask mask of flags to set
  */
#define bq28z_set_flag(dev, reg, mask) regdev_set_flags(&(dev)->mRegDev,(reg), (mask))

/**
  *@brief clears flags on device
  *@param dev ptr to BQ28Z device
  *@param reg ptr to register definition
  *@param mask mask of flags to set
  */
#define bq28z_clear_flag(dev, reg, mask) regdev_clear_flags(&(dev)->mRegDev,(reg), (mask))

/**
  *@brief checks flags on device
  *@param dev ptr to BQ28Z device
  *@param reg ptr to register definition
  *@param mask mask of flags to set
  *@return true if all flags in mask are set 
  *@return false if any flags in mask are not set
  */
#define bq28z_check_flag(dev, reg, mask) regdev_check_flags(&(dev)->mRegDev,(reg), (mask))

/*******************************************************************************
  Field Getters                                                                              
*******************************************************************************/

/**
 * @brief reads the REMAINING field from the DUMMY register 
 * @param dev ptr to BQ28Z device
 * @return BQ28Z_DUMMY_REMAINING_MIN creates a macro for the minimum 14 bit value
 * @return BQ28Z_DUMMY_REMAINING_MAX creates a macro for the maximum 14 bit value
 */
#define bq28z_get_dummy_remaining(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mDummy, BQ28Z_DUMMY_REMAINING_FIELD_MASK )
/**
 * @brief reads the SECURITY_Mode field from the ManufacturerAccess_ControlStatus register 
 * @param dev ptr to BQ28Z device
 * @return BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_SECURITY_MODE_RESERVED Reserved
 * @return BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_SECURITY_MODE_FULL_ACCESS Full Access
 * @return BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_SECURITY_MODE_UNSEALED Unsealed
 * @return BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_SECURITY_MODE_SEALED Sealed
 */
#define bq28z_get_manufactureraccess_controlstatus_security_mode(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mManufactureraccessControlstatus, BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_SECURITY_MODE_FIELD_MASK )
/**
 * @brief reads the AtRate field from the AtRate register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_atrate(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAtrate, BQ28Z_ATRATE_ATRATE_FIELD_MASK )
/**
 * @brief reads the AtRateTimeToEmpty field from the AtRateTimeToEmpty register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_atratetimetoempty(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAtratetimetoempty, BQ28Z_ATRATETIMETOEMPTY_ATRATETIMETOEMPTY_FIELD_MASK )
/**
 * @brief reads the Temperature field from the Temperature register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_temperature(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mTemperature, BQ28Z_TEMPERATURE_TEMPERATURE_FIELD_MASK )
/**
 * @brief reads the Voltage field from the Voltage register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_voltage(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mVoltage, BQ28Z_VOLTAGE_VOLTAGE_FIELD_MASK )
/**
 * @brief reads the Error_Code field from the BatteryStatus register 
 * @param dev ptr to BQ28Z device
 * @return BQ28Z_BATTERYSTATUS_ERROR_CODE_OK OK
 * @return BQ28Z_BATTERYSTATUS_ERROR_CODE_BUSY Busy
 * @return BQ28Z_BATTERYSTATUS_ERROR_CODE_RESERVED_COMMAND Reserved_Command
 * @return BQ28Z_BATTERYSTATUS_ERROR_CODE_UNSUPPORTED_COMMAND Unsupported_Command
 * @return BQ28Z_BATTERYSTATUS_ERROR_CODE_ACCESSDENIED AccessDenied
 * @return BQ28Z_BATTERYSTATUS_ERROR_CODE_OVERFLOW_UNDERFLOW Overflow_Underflow
 * @return BQ28Z_BATTERYSTATUS_ERROR_CODE_BADSIZE BadSize
 * @return BQ28Z_BATTERYSTATUS_ERROR_CODE_UNKNOWNERROR UnknownError
 */
#define bq28z_get_batterystatus_error_code(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mBatterystatus, BQ28Z_BATTERYSTATUS_ERROR_CODE_FIELD_MASK )
/**
 * @brief reads the Current field from the Current register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_current(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mCurrent, BQ28Z_CURRENT_CURRENT_FIELD_MASK )
/**
 * @brief reads the MaxError field from the MaxError register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_maxerror(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mMaxerror, BQ28Z_MAXERROR_MAXERROR_FIELD_MASK )
/**
 * @brief reads the RemainingCapacity field from the RemainingCapacity register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_remainingcapacity(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mRemainingcapacity, BQ28Z_REMAININGCAPACITY_REMAININGCAPACITY_FIELD_MASK )
/**
 * @brief reads the FullChargeCapacity field from the FullChargeCapacity register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_fullchargecapacity(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mFullchargecapacity, BQ28Z_FULLCHARGECAPACITY_FULLCHARGECAPACITY_FIELD_MASK )
/**
 * @brief reads the AverageCurrent field from the AverageCurrent register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_averagecurrent(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAveragecurrent, BQ28Z_AVERAGECURRENT_AVERAGECURRENT_FIELD_MASK )
/**
 * @brief reads the AverageTimeToEmpty field from the AverageTimeToEmpty register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_averagetimetoempty(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAveragetimetoempty, BQ28Z_AVERAGETIMETOEMPTY_AVERAGETIMETOEMPTY_FIELD_MASK )
/**
 * @brief reads the AverageTimeToFull field from the AverageTimeToFull register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_averagetimetofull(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAveragetimetofull, BQ28Z_AVERAGETIMETOFULL_AVERAGETIMETOFULL_FIELD_MASK )
/**
 * @brief reads the StandbyCurrent field from the StandbyCurrent register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_standbycurrent(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mStandbycurrent, BQ28Z_STANDBYCURRENT_STANDBYCURRENT_FIELD_MASK )
/**
 * @brief reads the StandbyTimeToEmpty field from the StandbyTimeToEmpty register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_standbytimetoempty(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mStandbytimetoempty, BQ28Z_STANDBYTIMETOEMPTY_STANDBYTIMETOEMPTY_FIELD_MASK )
/**
 * @brief reads the MaxLoadCurrent field from the MaxLoadCurrent register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_maxloadcurrent(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mMaxloadcurrent, BQ28Z_MAXLOADCURRENT_MAXLOADCURRENT_FIELD_MASK )
/**
 * @brief reads the MaxLoadTimeToEmpty field from the MaxLoadTimeToEmpty register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_maxloadtimetoempty(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mMaxloadtimetoempty, BQ28Z_MAXLOADTIMETOEMPTY_MAXLOADTIMETOEMPTY_FIELD_MASK )
/**
 * @brief reads the AveragePower field from the AveragePower register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_averagepower(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAveragepower, BQ28Z_AVERAGEPOWER_AVERAGEPOWER_FIELD_MASK )
/**
 * @brief reads the BTPDischargeSet field from the BTPDischargeSet register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_btpdischargeset(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mBtpdischargeset, BQ28Z_BTPDISCHARGESET_BTPDISCHARGESET_FIELD_MASK )
/**
 * @brief reads the BTPChargeSet field from the BTPChargeSet register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_btpchargeset(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mBtpchargeset, BQ28Z_BTPCHARGESET_BTPCHARGESET_FIELD_MASK )
/**
 * @brief reads the InternalTemperature field from the InternalTemperature register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_internaltemperature(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mInternaltemperature, BQ28Z_INTERNALTEMPERATURE_INTERNALTEMPERATURE_FIELD_MASK )
/**
 * @brief reads the CycleCount field from the CycleCount register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_cyclecount(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mCyclecount, BQ28Z_CYCLECOUNT_CYCLECOUNT_FIELD_MASK )
/**
 * @brief reads the RelativeStateOfCharge field from the RelativeStateOfCharge register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_relativestateofcharge(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mRelativestateofcharge, BQ28Z_RELATIVESTATEOFCHARGE_RELATIVESTATEOFCHARGE_FIELD_MASK )
/**
 * @brief reads the StateOfHealth field from the StateOfHealth register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_stateofhealth(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mStateofhealth, BQ28Z_STATEOFHEALTH_STATEOFHEALTH_FIELD_MASK )
/**
 * @brief reads the ChargeVoltage field from the ChargeVoltage register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_chargevoltage(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mChargevoltage, BQ28Z_CHARGEVOLTAGE_CHARGEVOLTAGE_FIELD_MASK )
/**
 * @brief reads the ChargeCurrent field from the ChargeCurrent register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_chargecurrent(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mChargecurrent, BQ28Z_CHARGECURRENT_CHARGECURRENT_FIELD_MASK )
/**
 * @brief reads the DesignCapacity field from the DesignCapacity register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_designcapacity(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mDesigncapacity, BQ28Z_DESIGNCAPACITY_DESIGNCAPACITY_FIELD_MASK )
/**
 * @brief reads the AltManufacturerAccess field from the AltManufacturerAccess register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_altmanufactureraccess(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mAltmanufactureraccess, BQ28Z_ALTMANUFACTURERACCESS_ALTMANUFACTURERACCESS_FIELD_MASK )
/**
 * @brief reads the MACData field from the MACData register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_macdata(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mMacdata, BQ28Z_MACDATA_MACDATA_FIELD_MASK )
/**
 * @brief reads the MACDataSum field from the MACDataSum register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_macdatasum(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mMacdatasum, BQ28Z_MACDATASUM_MACDATASUM_FIELD_MASK )
/**
 * @brief reads the MACDataLen field from the MACDataLen register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_get_macdatalen(dev) regdev_read_field(&(dev)->mRegDev, &(dev)->mMacdatalen, BQ28Z_MACDATALEN_MACDATALEN_FIELD_MASK )


/*******************************************************************************
  Field Setters                                                                              
*******************************************************************************/

/**
 * @brief writes the SECURITY_Mode field to the ManufacturerAccess_ControlStatus register 
 * @param dev ptr to BQ28Z device
 * @option BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_SECURITY_MODE_RESERVED Reserved
 * @option BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_SECURITY_MODE_FULL_ACCESS Full Access
 * @option BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_SECURITY_MODE_UNSEALED Unsealed
 * @option BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_SECURITY_MODE_SEALED Sealed
 */
#define bq28z_set_manufactureraccess_controlstatus_security_mode(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mManufactureraccessControlstatus, BQ28Z_MANUFACTURERACCESS_CONTROLSTATUS_SECURITY_MODE_FIELD_MASK , (val) )
/**
 * @brief writes the AtRate field to the AtRate register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_set_atrate(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mAtrate, BQ28Z_ATRATE_ATRATE_FIELD_MASK , (val) )
/**
 * @brief writes the BTPDischargeSet field to the BTPDischargeSet register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_set_btpdischargeset(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mBtpdischargeset, BQ28Z_BTPDISCHARGESET_BTPDISCHARGESET_FIELD_MASK , (val) )
/**
 * @brief writes the BTPChargeSet field to the BTPChargeSet register 
 * @param dev ptr to BQ28Z device
 */
#define bq28z_set_btpchargeset(dev, val) regdev_write_field(&(dev)->mRegDev, &(dev)->mBtpchargeset, BQ28Z_BTPCHARGESET_BTPCHARGESET_FIELD_MASK , (val) )

/*******************************************************************************
  Configs                                                                            
*******************************************************************************/

/**
 * @brief 
 * @param dev ptr to BQ28Z device
 */
#define BQ28Z_LOAD_CONFIG_DUMMY(dev) \

