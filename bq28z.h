/**
  * @file bq28z.h
  * @author generated by mrt-device utility 
  * @link [https://github.com/uprev-mrt/mrtutils/wiki/mrt-device]
  * @brief Device driver for BQ28Z device
  *
  *
  */

#ifdef __cplusplus
extern "C"
{
#endif

#include <stdint.h>
#include <stdbool.h>
#include "Devices/RegDevice/register_device.h"
#include "bq28z_regs.h"

/*user-block-top-start*/
/*user-block-top-end*/


/*******************************************************************************
  Sruct                                                                                
*******************************************************************************/

typedef struct{
    mrt_regdev_t mRegDev;            //ptr to base register-device 
    mrt_reg_t mDummy;                //dummy register
    mrt_reg_t mManufactureraccessControlstatus; //Control Register
    mrt_reg_t mAtrate;               //Read/Write. The value is a signed integer with the negative value indicating a discharge current value. The default value is 0 and forces AtRateTimeToEmpty() to return 65535.
    mrt_reg_t mAtratetimetoempty;    //This read-only function returns an unsigned integer value to predict remaining operating time based on battery discharge at the AtRate() value in minutes with a range of 0 to 65534. A value of 65535 indicates AtRate() = 0. The gas gauge updates the AtRateTimeToEmpty() within 1 s after the system sets the AtRate() value. The gas gauge updates these parameters every 1 s. The commands are used in NORMAL mode.
    mrt_reg_t mTemperature;          //This read-only function returns an unsigned integer value of temperature in units ( 0.1 k) measured by the gas gauge and is used for the gauging algorithm. It reports either InternalTemperature() or external thermistor temperature depending on the setting of the TEMPS bit in Pack configuration.
    mrt_reg_t mVoltage;              //This read-only function returns an unsigned integer value of the measured cell pack in mV with a range of 0 12000 mV.
    mrt_reg_t mBatterystatus;        //See the Flags register.
    mrt_reg_t mCurrent;              //This read-only function returns a signed integer value that is the instantaneous current flow through the sense resistor. The value is updated every 1 s. Units are mA.
    mrt_reg_t mMaxerror;             //This read-word function returns the expected margin of error
    mrt_reg_t mRemainingcapacity;    //This read-only command returns the predicted remaining capacity based on rate (per configured Load Select) temperature present depth-of-discharge and stored impedance. Values are reported in mAh.
    mrt_reg_t mFullchargecapacity;   //This read-only command returns the predicted capacity of the battery at full charge based on rate (per configured Load Select) temperature present depth-of-discharge and stored impedance. Values are reported in mAh.
    mrt_reg_t mAveragecurrent;       //This read-only function returns a signed integer value that is the average current flow through the sense resistor. The value is updated every 1 s. Units are mA.
    mrt_reg_t mAveragetimetoempty;   //Uses average current value with a time constant of 15 s for this method. A value of 65535 means the battery is not being discharged.
    mrt_reg_t mAveragetimetofull;    //This read-only function returns a unsigned integer value predicting time to reach full charge for the battery in units of minutes based on AverageCurrent(). The computation accounts for the taper current time extension from linear TTF computation based on a fixed AverageCurrent() rate of charge accumulation. A value of 65535 indicates the battery is not being charged.
    mrt_reg_t mStandbycurrent;       //This read-only function returns a signed integer value of measured standby current through the sense resistor. The StandbyCurrent() is an adaptive measurement. Initially it will report the standby current programmed in initial standby and after several seconds in standby mode will report the measured standby. The register value is updated every 1 s when measured current is above the deadband and is less than or equal to 2 Ã— initial standby. The first and last values that meet these criteria are not averaged in since they may not be stable values. To approximate to a 1-min time constant each new value of StandbyCurrent() is computed by taking approximate 93% weight of the last standby current and approximate 7% of the current measured average current.
    mrt_reg_t mStandbytimetoempty;   //This read-only function returns a unsigned integer value predicting remaining battery life at standby rate of discharge in units of minutes. The computation uses Nominal Available Capacity (NAC) for the calculation. A value of 65535 indicates the battery is not being discharged.
    mrt_reg_t mMaxloadcurrent;       //This read-only function returns a signed integer value in units of mA of maximum load conditions. The MaxLoadCurrent() is an adaptive measurement which is initially reported as the maximum load current programmed in initial Max Load Current register. If the measured current is ever greater than the initial Max Load Current then the MaxLoadCurrent() updates to the new current. MaxLoadCurrent() is reduced to the average of the previous value and initial Max Load Current whenever the battery is charged to full after a previous discharge to an SOC of less than 50%. This will prevent the reported value from maintaining an unusually high value.
    mrt_reg_t mMaxloadtimetoempty;   //This read-only function returns a unsigned integer value predicting remaining battery life at the maximum discharge load current rate in units of minutes. A value of 65535 indicates that the battery is not being discharged.
    mrt_reg_t mAveragepower;         //This read-only function returns a signed integer value of average power during battery charging and discharging. It is negative during discharge and positive during charge. A value of 0 indicates that the battery is not being discharged. The value is reported in units of mW.
    mrt_reg_t mBtpdischargeset;      //This command sets the OperationStatusA BTP_INT and the BTP_INT pin will be asserted when the RemCap drops below the set threshold in DF register.
    mrt_reg_t mBtpchargeset;         //This command clears the OperationStatusA BTP_INT and the BTP_INT pin will be deasserted.
    mrt_reg_t mInternaltemperature;  //This read-only function returns an unsigned integer value of the measured internal temperature of the device in 0.1-k units measured by the gas gauge.
    mrt_reg_t mCyclecount;           //This read-only function returns an unsigned integer value of the number of cycles the battery has experienced a discharge (range 0 to 65535). One cycle occurs when accumulated discharge greater than or equal to CC threshold.
    mrt_reg_t mRelativestateofcharge; //This read-only function returns an unsigned integer value of the predicted remaining battery capacity expressed as percentage of FullChargeCapacity() with a range of 0% to 100%.
    mrt_reg_t mStateofhealth;        //This read-only function returns an unsigned integer value expressed as a percentage of the ratio of predicted FCC (25C SoH Load Rate) over the DesignCapacity(). The range is 0x00 to 0x64 for 0% to 100% respectively.
    mrt_reg_t mChargevoltage;        //Returns the desired charging voltage in mV to the charger
    mrt_reg_t mChargecurrent;        //Returns the desired charging current in mA to the charger
    mrt_reg_t mDesigncapacity;       //In SEALED and UNSEALED access This command returns the value stored in Design Capacity and is expressed in mAh. This is intended to be a theoretical or nominal capacity of a new pack but should have no bearing on the operation of the gas gauge functionality.
    mrt_reg_t mAltmanufactureraccess; //MAC Data block command
    mrt_reg_t mMacdata;              //MAC Data block
    mrt_reg_t mSafetyalert;          //This command returns the SafetyAlert flags on AltManufacturerAccess or MACData.
    mrt_reg_t mMacdatasum;           //MAC Data block checksum
    mrt_reg_t mMacdatalen;           //MAC Data block length
/*user-block-struct-start*/
/*user-block-struct-end*/
}bq28z_t;

/**
 * @brief initializes BQ28Z device for i2c bus
 * @param dev ptr to BQ28Z device
 * @param i2c handle for i2c bus
 */
mrt_status_t bq28z_init_i2c(bq28z_t* dev, mrt_i2c_handle_t i2c);

/**
  *@brief tests interface with device
  *@param dev ptr to BQ28Z device
  *@return MRT_STATUS_OK if test is passed 
  *@return MRT_STATUS_ERROR if test fails
  */
mrt_status_t bq28z_test(bq28z_t* dev);

/**
  *@brief writes register of device
  *@param dev ptr to BQ28Z device
  *@param reg ptr to register definition
  *@param data data to be write
  *@return status (type defined by platform)
  */
#define bq28z_write_reg(dev, reg, data) regdev_write_reg(&(dev)->mRegDev, (reg), (data))

/**
  *@brief reads register of device
  *@param dev ptr to BQ28Z device
  *@param reg ptr to register definition
  *@param data ptr to store data
  *@return value of register
  */
#define bq28z_read_reg(dev, reg) regdev_read_reg(&(dev)->mRegDev, (reg))


/*user-block-bottom-start*/

/**
  *@brief unseal memory
  *@param dev ptr to BQ28Z device
  */
mrt_status_t bq28z_unseal(bq28z_t* dev);

/**
  *@brief unseal memory
  *@param dev ptr to BQ28Z device
  */
mrt_status_t bq28z_seal(bq28z_t* dev);

/*user-block-bottom-end*/

#ifdef __cplusplus
}
#endif